{"name":"Grunt-grover","tagline":"Run YUI tests with Grunt","body":"# grunt-grover  [![Build Status](https://travis-ci.org/MarshallOfSound/grunt-grover.svg?branch=master)](https://travis-ci.org/MarshallOfSound/grunt-grover)\r\n\r\n> A grunt task to run yui tests with grover\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.5`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-grover --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-grover');\r\n```\r\n\r\n## The \"grover\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `grover` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  grover: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n### Options\r\n\r\n#### options.path\r\n*Required*  \r\nType: `String`\r\n\r\nA glob format path to your YUI test files.  E.g. `'test/js/*.html'`\r\n\r\n#### options.concurrent\r\nType: `Number`  \r\nDefault value: `15`\r\n\r\nNumber of tests to run concurrently\r\n\r\n#### options.logLevel\r\nType: `Number`\r\nDefault value: `2`\r\n\r\nLevel of logging --   \r\n`2`: All output  \r\n`1`: Only error output  \r\n`0`: No output\r\n\r\n#### options.failOnFirst\r\nType: `Boolean`  \r\nDefault value: `false`\r\n\r\nFail on the first error\r\n\r\n#### options.timeout\r\nType: `Number`\r\n\r\nTime in seconds, after which to consider a test failed\r\n\r\n#### options.import\r\nType: `String`\r\n\r\nPath to a JS file to include and use the export (an array) as the list of files to process\r\n\r\n#### options.prefix\r\nType: `String`=\r\n\r\nString to prefix all server URL's with (for dynamic server names)\r\n\r\n#### options.suffix\r\nType: `String`\r\n\r\nString to append to all server URL's (for dynamic server names)\r\n\r\n#### options.outfile\r\nType: `String`\r\n\r\nPath to a file to output the test results to, if the file does not exist it will be created for you  \r\nThe output type can be set with the `options.outtype` setting\r\n\r\n#### options.outtype\r\nType: `String`  \r\nDefault value: `tap`\r\n\r\nThe format for the test results output file, it can be:  \r\n`tap`: TAP export  \r\n`xml`: XML export  \r\n`json`: JSON export  \r\n`junit`: JUnit XML export  \r\n\r\n#### options.server\r\nType: `Boolean`  \r\nDefault value: `false`\r\n\r\nStarts a static file server in the CWD, tests should be relative to this directory\r\n\r\n#### options.port\r\nType: `Number`\r\nDefault value: `8000`\r\n\r\nPort number to start the static file server on\r\n\r\n#### options['phantom-bin']\r\nType: `String`  \r\nDefault value: `Searches for phantomjs in the node_modeuls directory`\r\n\r\nPath to phantomjs if you don't want to use the node intergrated version\r\n\r\n#### options['no-run']\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nDo not run the tests, just prep the server (used for other testing)\r\n\r\n### Coverage Options\r\n\r\nCoverage options are stored in a `optiones.coverage` object.  For coverage to work you must instument your own files with istanbul.\r\n\r\n#### options.coverage.on\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nGenerate a coverage report and print it to the screen\r\n\r\n#### options.coverage.warn\r\nType: `Number`\r\nDefault value: `80`\r\n\r\nLevel of coverage to throw a Grunt warning at\r\n\r\n#### options.coverage.istanbul\r\nType: `String`\r\n\r\nPath to output a istanbul coverage report to, must be an empty directory.  If the directory does not exist it will be created for you\r\n\r\n#### options.reportFile\r\nType: `String`\r\n\r\nPath to output a basic coverage report file to, the file will be in a `lcov` format.  If the file does not exist it will be created for you.\r\n\r\n#### options.sourcePrefix\r\nType: `String`\r\n\r\nThe relative path to the original source file for use in the coverage results.\r\n\r\n### Usage Examples\r\n\r\n#### Basic Options\r\nIn this example, basic options are setup to run yui test on all files in the `test/js` directory with full logging turned on.  A test report will be created at `reports/grover.tap` and coverage information will appear in the console.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  grover: {\r\n    options: {\r\n        path: 'test/js/*.html',\r\n        logLevel: 2,\r\n        concurrent: 15,\r\n        outfile: 'reports/grover.tap',\r\n        outtype: 'tap',\r\n        coverage: {\r\n            on: true\r\n        }\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n**0.1.0: ** *15/02/2015*\r\n**0.2.0: ** *17/02/2015*\r\n**0.2.1: ** *19/02/2015*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}